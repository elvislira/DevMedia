- Principais características do React.js:

    1. Utiliza como base as linguagens HTML, CSS e JavaScript;
    2. Utiliza o conceito de componentes para criar as páginas;
    3. Cria Single Page Applications (SPAs).

- Extensão do arquivo react: .jsx

- Funções criadas em react pode conter HTML.

- SPA (Single Page Application - Aplicação de Página Única)
    Permite mudar seu conteúdo sem recarregar a página.

- Next.js é o framework recomendado na documentação para uso do React.
    * Reduz o tempo de criação de uma Aplicação React
    * Reduz o tempo de carregamento inicial de uma página
    * Permite aos mecanismos de busca encontrarem páginas React mais facilmente

- Criar uma aplicação React:
    npx create-next-app

- Executando a aplicação:
    npm run dev

- Estrutura de pastas de um projeto React:
    Pastas:
        public:     armazenar arquivos de imagem (png, svg, ico).
        src:        contém todo o código da aplicação.
            -> pages:   código JS.
            -> styles:  código CSS.
    Arquivos:
        pages/index.js:             principal arquivo da aplicação.
        styles/global.css:          estilos globais da aplicação.
        styles/Home.modules.css:    estilos do index.js.

- Estrutura do arquivo index.js
    import Head from "next/head";   -> componente importado do Next.js
    import styles from "@/styles/Home.module.css";  -> importação do estilo.


    export default function Home() {    -> criar e exportar uma função
    return (                                o retorno é uma componente (página nesse caso)
        <>  -> elemento pai (<> tag fragment)
            <Head>
                <title>Create Next App</title>                                          |
                <meta name="description" content="Generated by create next app" />      |Meta
                <meta name="viewport" content="width=device-width, initial-scale=1" />  |tags
                <link rel="icon" href="/favicon.ico" />                                 |
            </Head>
            
            <div>                       |
                <h1>Hello World!!!</h1> | elementos a serem exibidos
            </div>                      |
        </>
    );
    }

    Observações:
        1. O uso do elemento pai é obrigatório, porém só pode haver um elemento pai.
        2. O uso de tag fragment não é obrigatória, podendo ser substituída por tags html.
        3. @/ representa a pasta raiz da aplicação (src)

- Aplocando uma classe de estilo
    import nome_referencia from "arquivo_referencia";

    className={nome_referencia.nome_classe}

    Exemplo:
    -> index.js
        import estilos from "@/styles/Home.module.css";

        export default function Home() {
        return (
            <div className={estilos.container_principal}>
            ...
    -> Home.module.css
        .container_principal {
        width: 100%;
        padding: 60px 20px;
        }

- Componentes nativos:
    * Image:    import NomeImagem from "caminhoi-da-imagem";
                import Image from "next/image";

                ...
                    <Image src={NomeImagem} alt="Texto" />
                ...
    * Link:     import Link from "next/link";
                <Link href="link-a-acessar">Legenda link</Link>

